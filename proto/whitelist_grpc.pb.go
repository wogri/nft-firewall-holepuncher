// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package whitelist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhitelistClient is the client API for Whitelist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhitelistClient interface {
	Transfer(ctx context.Context, opts ...grpc.CallOption) (Whitelist_TransferClient, error)
}

type whitelistClient struct {
	cc grpc.ClientConnInterface
}

func NewWhitelistClient(cc grpc.ClientConnInterface) WhitelistClient {
	return &whitelistClient{cc}
}

func (c *whitelistClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (Whitelist_TransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &Whitelist_ServiceDesc.Streams[0], "/whitelist.Whitelist/Transfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &whitelistTransferClient{stream}
	return x, nil
}

type Whitelist_TransferClient interface {
	Send(*WhitelistRequest) error
	Recv() (*WhitelistReply, error)
	grpc.ClientStream
}

type whitelistTransferClient struct {
	grpc.ClientStream
}

func (x *whitelistTransferClient) Send(m *WhitelistRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *whitelistTransferClient) Recv() (*WhitelistReply, error) {
	m := new(WhitelistReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WhitelistServer is the server API for Whitelist service.
// All implementations must embed UnimplementedWhitelistServer
// for forward compatibility
type WhitelistServer interface {
	Transfer(Whitelist_TransferServer) error
	mustEmbedUnimplementedWhitelistServer()
}

// UnimplementedWhitelistServer must be embedded to have forward compatible implementations.
type UnimplementedWhitelistServer struct {
}

func (UnimplementedWhitelistServer) Transfer(Whitelist_TransferServer) error {
	return status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedWhitelistServer) mustEmbedUnimplementedWhitelistServer() {}

// UnsafeWhitelistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhitelistServer will
// result in compilation errors.
type UnsafeWhitelistServer interface {
	mustEmbedUnimplementedWhitelistServer()
}

func RegisterWhitelistServer(s grpc.ServiceRegistrar, srv WhitelistServer) {
	s.RegisterService(&Whitelist_ServiceDesc, srv)
}

func _Whitelist_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WhitelistServer).Transfer(&whitelistTransferServer{stream})
}

type Whitelist_TransferServer interface {
	Send(*WhitelistReply) error
	Recv() (*WhitelistRequest, error)
	grpc.ServerStream
}

type whitelistTransferServer struct {
	grpc.ServerStream
}

func (x *whitelistTransferServer) Send(m *WhitelistReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *whitelistTransferServer) Recv() (*WhitelistRequest, error) {
	m := new(WhitelistRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Whitelist_ServiceDesc is the grpc.ServiceDesc for Whitelist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Whitelist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whitelist.Whitelist",
	HandlerType: (*WhitelistServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _Whitelist_Transfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "whitelist.proto",
}
